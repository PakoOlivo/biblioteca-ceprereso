name: Build and Release Beta

on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    name: Lint and Test
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Install frontend dependencies
        run: npm ci

      - name: Lint frontend
        run: |
          npm run lint
          npm run format:check

      - name: Build frontend
        run: npm run build

      - name: Check Rust formatting
        run: npm run rust:fmt:check

      - name: Rust lint with Clippy
        run: npm run rust:clippy

  build-tauri:
    needs: lint-and-test
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'ubuntu-20.04'
            args: '--target x86_64-unknown-linux-gnu'
          - platform: 'windows-latest'
            args: '--target x86_64-pc-windows-msvc'

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.platform == 'ubuntu-20.04' && 'x86_64-unknown-linux-gnu' || 'x86_64-pc-windows-msvc' }}

      - name: Install dependencies (Ubuntu only)
        if: matrix.platform == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y libgtk-3-dev libwebkit2gtk-4.0-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Install frontend dependencies
        run: npm ci

      - name: Build Tauri app
        uses: tauri-apps/tauri-action@v0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tagName: v__VERSION__-beta
          releaseName: 'Biblioteca CEPRERESO v__VERSION__ Beta'
          releaseBody: |
            🚀 **Beta Release v__VERSION__**

            Sistema de Gestión de Biblioteca CEPRERESO

            **Instalación:**
            - **Windows**: Descarga el archivo `.msi` y ejecútalo
            - **Linux**: Descarga el archivo `.AppImage`, hazlo ejecutable y ejecútalo

            **Cambios en esta versión:**
            - Build automático desde main
            - Binarios auto-contenidos sin dependencias externas

            **Nota:** Esta es una versión beta para pruebas.
          releaseDraft: false
          prerelease: true
          args: ${{ matrix.args }}

  cleanup-old-prereleases:
    needs: build-tauri
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Delete old prereleases
        uses: actions/github-script@v7
        with:
          script: |
            const { data: releases } = await github.rest.repos.listReleases({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            const betaReleases = releases
              .filter(release => release.prerelease && release.tag_name.includes('beta'))
              .sort((a, b) => new Date(b.created_at) - new Date(a.created_at));

            // Keep only the 3 most recent beta releases
            const releasesToDelete = betaReleases.slice(3);

            for (const release of releasesToDelete) {
              console.log(`Deleting old beta release: ${release.tag_name}`);
              await github.rest.repos.deleteRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                release_id: release.id,
              });
              
              try {
                await github.rest.git.deleteRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: `tags/${release.tag_name}`,
                });
              } catch (error) {
                console.log(`Could not delete tag ${release.tag_name}: ${error.message}`);
              }
            }
